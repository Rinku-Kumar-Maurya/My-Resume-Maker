{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\d\\\\web_projects\\\\Resume-Builder\\\\frontend\\\\src\\\\components\\\\FormFields\\\\DatePickerField.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useField } from 'formik';\nimport Grid from '@material-ui/core/Grid';\nimport { MuiPickersUtilsProvider, KeyboardDatePicker } from '@material-ui/pickers';\nimport DateFnsUtils from '@date-io/date-fns';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function DatePickerField(props) {\n  _s();\n\n  const [field, meta, helper] = useField(props);\n  const {\n    touched,\n    error\n  } = meta;\n  const {\n    setValue\n  } = helper;\n  const isError = touched && error && true;\n  const {\n    value\n  } = field;\n  const [selectedDate, setSelectedDate] = useState(null);\n  useEffect(() => {\n    if (value) {\n      const date = new Date(value);\n      setSelectedDate(date);\n    }\n  }, [value]);\n\n  function isoFormatDMY(d) {\n    function pad(n) {\n      return (n < 10 ? '0' : '') + n;\n    }\n\n    return pad(d.getUTCDate()) + '/' + pad(d.getUTCMonth() + 1) + '/' + d.getUTCFullYear();\n  }\n\n  function _onChange(date) {\n    if (date) {\n      setSelectedDate(date);\n\n      try {\n        const ISODateString = isoFormatDMY(date);\n        setValue(ISODateString);\n      } catch (error) {\n        setValue(date);\n      }\n    } else {\n      setValue(date);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    children: /*#__PURE__*/_jsxDEV(MuiPickersUtilsProvider, {\n      utils: DateFnsUtils,\n      children: /*#__PURE__*/_jsxDEV(KeyboardDatePicker, { ...field,\n        ...props,\n        value: selectedDate,\n        onChange: _onChange,\n        error: isError,\n        invalidDateMessage: isError && error,\n        helperText: isError && error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n}\n\n_s(DatePickerField, \"dPmEhMxmBgI3uQjsuvSJ6+dQ+MA=\", false, function () {\n  return [useField];\n});\n\n_c = DatePickerField;\n\nvar _c;\n\n$RefreshReg$(_c, \"DatePickerField\");","map":{"version":3,"sources":["C:/Users/d/web_projects/Resume-Builder/frontend/src/components/FormFields/DatePickerField.jsx"],"names":["React","useState","useEffect","useField","Grid","MuiPickersUtilsProvider","KeyboardDatePicker","DateFnsUtils","DatePickerField","props","field","meta","helper","touched","error","setValue","isError","value","selectedDate","setSelectedDate","date","Date","isoFormatDMY","d","pad","n","getUTCDate","getUTCMonth","getUTCFullYear","_onChange","ISODateString"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,QAAT,QAAyB,QAAzB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,SACEC,uBADF,EAEEC,kBAFF,QAGO,sBAHP;AAIA,OAAOC,YAAP,MAAyB,mBAAzB;;AAEA,eAAe,SAASC,eAAT,CAAyBC,KAAzB,EAAgC;AAAA;;AAC7C,QAAM,CAACC,KAAD,EAAQC,IAAR,EAAcC,MAAd,IAAwBT,QAAQ,CAACM,KAAD,CAAtC;AACA,QAAM;AAAEI,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAqBH,IAA3B;AACA,QAAM;AAAEI,IAAAA;AAAF,MAAeH,MAArB;AACA,QAAMI,OAAO,GAAGH,OAAO,IAAIC,KAAX,IAAoB,IAApC;AACA,QAAM;AAAEG,IAAAA;AAAF,MAAYP,KAAlB;AACA,QAAM,CAACQ,YAAD,EAAeC,eAAf,IAAkClB,QAAQ,CAAC,IAAD,CAAhD;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIe,KAAJ,EAAW;AACT,YAAMG,IAAI,GAAG,IAAIC,IAAJ,CAASJ,KAAT,CAAb;AACAE,MAAAA,eAAe,CAACC,IAAD,CAAf;AACD;AACF,GALQ,EAKN,CAACH,KAAD,CALM,CAAT;;AAOA,WAASK,YAAT,CAAsBC,CAAtB,EAAyB;AACvB,aAASC,GAAT,CAAaC,CAAb,EAAgB;AAAC,aAAO,CAACA,CAAC,GAAC,EAAF,GAAM,GAAN,GAAa,EAAd,IAAoBA,CAA3B;AAA6B;;AAC9C,WAAOD,GAAG,CAACD,CAAC,CAACG,UAAF,EAAD,CAAH,GAAsB,GAAtB,GAA4BF,GAAG,CAACD,CAAC,CAACI,WAAF,KAAkB,CAAnB,CAA/B,GAAuD,GAAvD,GAA6DJ,CAAC,CAACK,cAAF,EAApE;AACD;;AAED,WAASC,SAAT,CAAmBT,IAAnB,EAAyB;AACvB,QAAIA,IAAJ,EAAU;AACRD,MAAAA,eAAe,CAACC,IAAD,CAAf;;AACA,UAAI;AACF,cAAMU,aAAa,GAAGR,YAAY,CAACF,IAAD,CAAlC;AACAL,QAAAA,QAAQ,CAACe,aAAD,CAAR;AACD,OAHD,CAGE,OAAOhB,KAAP,EAAc;AACdC,QAAAA,QAAQ,CAACK,IAAD,CAAR;AACD;AACF,KARD,MAQO;AACLL,MAAAA,QAAQ,CAACK,IAAD,CAAR;AACD;AACF;;AAED,sBACE,QAAC,IAAD;AAAM,IAAA,SAAS,MAAf;AAAA,2BACE,QAAC,uBAAD;AAAyB,MAAA,KAAK,EAAEb,YAAhC;AAAA,6BACE,QAAC,kBAAD,OACMG,KADN;AAAA,WAEMD,KAFN;AAGE,QAAA,KAAK,EAAES,YAHT;AAIE,QAAA,QAAQ,EAAEW,SAJZ;AAKE,QAAA,KAAK,EAAEb,OALT;AAME,QAAA,kBAAkB,EAAEA,OAAO,IAAIF,KANjC;AAOE,QAAA,UAAU,EAAEE,OAAO,IAAIF;AAPzB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAeD;;GAjDuBN,e;UACQL,Q;;;KADRK,e","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useField } from 'formik';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  KeyboardDatePicker\r\n} from '@material-ui/pickers';\r\nimport DateFnsUtils from '@date-io/date-fns';\r\n\r\nexport default function DatePickerField(props) {\r\n  const [field, meta, helper] = useField(props);\r\n  const { touched, error } = meta;\r\n  const { setValue } = helper;\r\n  const isError = touched && error && true;\r\n  const { value } = field;\r\n  const [selectedDate, setSelectedDate] = useState(null);\r\n\r\n  useEffect(() => {\r\n    if (value) {\r\n      const date = new Date(value);\r\n      setSelectedDate(date);\r\n    }\r\n  }, [value]);\r\n\r\n  function isoFormatDMY(d) {  \r\n    function pad(n) {return (n<10? '0' :  '') + n}\r\n    return pad(d.getUTCDate()) + '/' + pad(d.getUTCMonth() + 1) + '/' + d.getUTCFullYear();\r\n  }\r\n\r\n  function _onChange(date) {\r\n    if (date) {\r\n      setSelectedDate(date);\r\n      try {\r\n        const ISODateString = isoFormatDMY(date);\r\n        setValue(ISODateString);\r\n      } catch (error) {\r\n        setValue(date);\r\n      }\r\n    } else {\r\n      setValue(date);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Grid container>\r\n      <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n        <KeyboardDatePicker\r\n          {...field}\r\n          {...props}\r\n          value={selectedDate}\r\n          onChange={_onChange}\r\n          error={isError}\r\n          invalidDateMessage={isError && error}\r\n          helperText={isError && error}\r\n        />\r\n      </MuiPickersUtilsProvider>\r\n    </Grid>\r\n  );\r\n}"]},"metadata":{},"sourceType":"module"}